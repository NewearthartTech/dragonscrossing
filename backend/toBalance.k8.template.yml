apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: dcx-balance
spec:
  selector:
    matchLabels:
      app: rabbitmq
  serviceName: rabbitmq
  replicas: 1
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - image: masstransit/rabbitmq
          name: rabbitmq

          ports:
            - containerPort: 5672
            - containerPort: 15672

          env:
            - name: RABBITMQ_DEFAULT_USER
              value: admin
            - name: RABBITMQ_DEFAULT_PASS
              value: admin

          volumeMounts:
            - name: rabbitmq-data
              mountPath: /var/lib/rabbitmq

  volumeClaimTemplates:
    - metadata:
        name: rabbitmq-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq
  namespace: dcx-balance
spec:
  ports:
    - port: 5672
  selector:
    app: rabbitmq
  clusterIP: None


---

kind: Service
apiVersion: v1
metadata:
  name: mongodb
  namespace: dcx-balance
spec:
    clusterIP: None
    ports:
    -   port: 27017
    selector:
        app: mongodb

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: mongodb-node
    namespace: dcx-balance
spec:
  serviceName: mongodb
  selector:
    matchLabels:
        app: mongodb
  replicas: 1
  template:
    metadata:
        labels:
            app: mongodb
    spec:
        containers:
        -   name: mongodb-node
            image: mongo:3.6
            command: [ "/usr/bin/mongod", "--smallfiles", "--bind_ip_all" ]
            volumeMounts:
            -   mountPath: "/data/db"
                name: mongo-data
            ports:
            -   containerPort: 27017
       
        
  volumeClaimTemplates:
  - metadata:
        name: mongo-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---          

apiVersion: apps/v1
kind: Deployment
metadata:
    name: dcx-server
    namespace: dcx-balance
    labels:
      app: dcx-server

spec:
  selector:
    matchLabels:
        app: dcx-server
  replicas: 1
  template:

    metadata:
        labels:
            app: dcx-server
    spec:

        imagePullSecrets:
        - name: newearthcb-azurecr

        containers:
        -   name: dcx-server
            image: newearthcb.azurecr.io/dcx-server:__TAG__SERVER

            env:

            -   name: mongo__connectionString
                value: "mongodb://mongodb?connect=direct"

            -   name: rabbitmq__host
                value: "rabbitmq"


            -   name: ASPNETCORE_hostBuilder__reloadConfigOnChange
                value: "false"

            -   name: web3__chain__Name
                value: "avalanche_fuji"
            -   name: web3__chain__ChainId
                value: "43113"
            -   name: web3__rpcUrl
                value: "https://rpc.ankr.com/avalanche_fuji"
            -   name: web3__contracts__1.0.684.0__DcxHeroContract
                value: "0x4b91f8ba5d211f017ef041ce1878639db5480574"
            -   name: web3__contracts__1.0.684.0__TokenomicsContract
                value: "0xf7ea2361746ecc75469798fd85857a053630541f"
            -   name: web3__contracts__1.0.684.0__DcxItemsContract
                value: "0x9d30794b64057f3db683808a6e91c1ddfcbb3601"
            -   name: web3__dcxTokenContract
                value: "0xC5571D671f3563AB3D62456Ee2DD6aE18FD3Eb95"

            -   name: web3__serverPrivateKey
                value: "0x5094ebdb3e8d99ca61d77e9bd8bddad046cbcb52c607a26065e3ee45c49c4fa3"
            
            
            -   name: web3__metaDataBaseURI
                value: "https://gamebalance.staging.dragonscrossing.com/metadata"

---

apiVersion: apps/v1
kind: Deployment
metadata:
    name: dcx-web
    namespace: dcx-balance
    labels:
      app: dcx-web

spec:
  selector:
    matchLabels:
        app: dcx-web
  replicas: 1
  template:

    metadata:
        labels:
            app: dcx-web
    spec:

        imagePullSecrets:
        - name: newearthcb-azurecr

        containers:
        -   name: dcx-web
            image: newearthcb.azurecr.io/dcx-web:__TAG__FRONTEND

            env:

            -   name: NEXT_PUBLIC_API
                value: "."

            -   name: NEXT_PUBLIC_AVAX_FUJI_RPC_URL
                value: "https://api.avax-test.network/ext/bc/C/rpc"

            -   name: NEXT_PUBLIC_MORALIS_KEY
                value: "gXqOAFuAHTZMbIIr36OFu1hGcy8fNrTHFOOZskgCrlyweI3FKn17uCxRL2rlLeLJ"


            -   name: NEXT_PUBLIC_DCX_TOKENOMICS_ADDRESS
                value: "0xf7ea2361746ecc75469798fd85857a053630541f"

            -   name: NEXT_PUBLIC_DCXHERO_CONTRACT_ADDRESS
                value: "0x4b91f8ba5d211f017ef041ce1878639db5480574"

            -   name: NEXT_PUBLIC_DCX_VAULT_ADDRESS
                value: "0x2B81BB9640fdbAE03A9b69A51F8Ea4CA1CFA080b"

            -   name: NEXT_PUBLIC_DCX_TOKEN_ADDRESS
                value: "0xC5571D671f3563AB3D62456Ee2DD6aE18FD3Eb95"
                
            -   name: NEXT_PUBLIC_DCX_ITEM_ADDRESS
                value: "0x9d30794b64057f3db683808a6e91c1ddfcbb3601"

---

apiVersion: v1
kind: Service
metadata:
    name: dcx-server
    namespace: dcx-balance
spec:
    ports:
    -   name: http 
        port: 80
    selector:
        app: dcx-server

---

apiVersion: v1
kind: Service
metadata:
    name: dcx-web
    namespace: dcx-balance
spec:
    ports:
    -   name: http 
        port: 3000
    selector:
        app: dcx-web

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dcx-balance-ingress
  namespace: dcx-balance
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - coreDevOnly'

    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-nginx"
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
spec:
  tls:
    - hosts:
      - gamebalance.staging.dragonscrossing.com
      secretName: dcx-balance-tls-main

  rules:
  - host: gamebalance.staging.dragonscrossing.com
    http:
      paths:
      - pathType: Prefix
        path: "/_next/static/chunks/main.js"
        backend:
          service:
            name: dcx-web
            port: 
              number: 3000

      - pathType: Prefix
        path: "/heroSelect"
        backend:
          service:
            name: dcx-web
            port: 
              number: 3000

      - pathType: Exact
        path: "/"
        backend:
          service:
            name: dcx-web
            port: 
              number: 3000

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dcx-balance-ingress-all
  namespace: dcx-balance
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-nginx"
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
spec:
  tls:
    - hosts:
      - gamebalance.staging.dragonscrossing.com
      secretName: dcx-balance-tls-main

  rules:
  - host: gamebalance.staging.dragonscrossing.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: dcx-web
            port: 
              number: 3000
      
      - pathType: Prefix
        path: "/api"
        backend:
          service:
            name: dcx-server
            port: 
              number: 80


---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: dcx-balance
spec:
  selector:
    matchLabels:
      app: elasticsearch
  serviceName: elasticsearch
  replicas: 1
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      securityContext:
        fsGroup: 1000

      initContainers:
        - name: init-sysctl
          image: busybox
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          command: ["sysctl", "-w", "vm.max_map_count=262144"]

      containers:
        - image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
          name: elasticsearch
          securityContext:
            privileged: true
            runAsUser: 1000
            capabilities:
              add:
                - IPC_LOCK
                - SYS_RESOURCE

          ports:
            - containerPort: 9200

          env:
            - name: bootstrap.memory_lock
              value: "false"
            - name: xpack.security.enabled
              value: "false"
            - name: discovery.type
              value: "single-node"
            - name: ES_JAVA_OPTS
              value: "-Xmx256m -Xms256m"

          volumeMounts:
            - name: elasticsearch-data
              mountPath: /usr/share/elasticsearch/data

          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /_cluster/health?local=true
              port: 9200
            initialDelaySeconds: 5

#          resources:
#            requests:
#              memory: "500Mi"

  volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 6Gi

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: dcx-balance
spec:
  ports:
    - port: 9200
  selector:
    app: elasticsearch
  clusterIP: None

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kibana-data-pvc
  namespace: dcx-balance
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  namespace: dcx-balance
  labels:
    app: kibana
spec:
  selector:
    matchLabels:
      app: kibana
  strategy:
    type: Recreate

  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - image: docker.elastic.co/kibana/kibana:8.6.0
          name: kibana
          ports:
            - containerPort: 5601
          env:
            - name: ELASTICSEARCH_HOSTS
              value: http://elasticsearch:9200

      # We will populate kibana soon
      #          volumeMounts:
      #            - mountPath: /usr/share/kibana/config
      #              name: kibana-data
      #              subPath: config
      #            - mountPath: /usr/share/kibana/data
      #              name: kibana-data
      #              subPath: data

      volumes:
        - name: kibana-data
          persistentVolumeClaim:
            claimName: kibana-data-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: dcx-balance
spec:
  ports:
    - port: 5601
  selector:
    app: kibana
  clusterIP: None

---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dcx-kibana-balances-ingress
  namespace: dcx-balance
  annotations:
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - coreDevOnly'
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-nginx"
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
spec:
  tls:
    - hosts:
      - kibana-gamebalance.staging.dragonscrossing.com
      secretName: dcx-balance-tls-kibana-main

  rules:
  - host: kibana-gamebalance.staging.dragonscrossing.com
    http:
      paths:

      - pathType: Exact
        path: "/"
        backend:
          service:
            name: kibana
            port: 
              number: 5601

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: dcx-balance-ingress-kibana-all
  namespace: dcx-balance
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-nginx"
    nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
spec:
  tls:
    - hosts:
      - kibana-gamebalance.staging.dragonscrossing.com
      secretName: dcx-balance-tls-kibana-main

  rules:
  - host: kibana-gamebalance.staging.dragonscrossing.com
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: kibana
            port: 
              number: 5601
      



            