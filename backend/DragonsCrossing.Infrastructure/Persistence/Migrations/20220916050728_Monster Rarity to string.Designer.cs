// <auto-generated />
using System;
using DragonsCrossing.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DragonsCrossing.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220916050728_Monster Rarity to string")]
    partial class MonsterRaritytostring
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DragonsCrossing.Domain.Armors.Armor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArmorTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("CombatLootId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CriticalHitRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("Defense")
                        .HasColumnType("float");

                    b.Property<int>("HeroInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("SlotNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorTemplateId");

                    b.HasIndex("CombatLootId");

                    b.HasIndex("HeroInventoryId");

                    b.ToTable("Armor", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Armors.ArmorTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ArmorType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HeroClass")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ImageBaseUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsStartingGear")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PurchasePrice")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<string>("SlotType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("ArmorTemplate", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArmorType = "Leathers",
                            Description = "Standard body armor for defending",
                            ImageBaseUrl = "/images/items/weapons/BasicLeatherArmor.jpg",
                            IsStartingGear = true,
                            Name = "Basic Leather Armor",
                            PurchasePrice = 1,
                            SellPrice = 1,
                            SlotType = "Chest"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Combats.Combat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CharismaOpportunityResult")
                        .HasColumnType("int");

                    b.Property<int?>("CombatLootId")
                        .HasColumnType("int");

                    b.Property<int?>("CombatOpportunityResult")
                        .HasColumnType("int");

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCharismaOpportunityAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCombatOpportunityAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCombatOver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeroDead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMonsterDead")
                        .HasColumnType("bit");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("TileId")
                        .HasColumnType("int");

                    b.Property<bool>("UserConfirmedCombatEnd")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CombatLootId");

                    b.HasIndex("HeroId");

                    b.HasIndex("MonsterId");

                    b.HasIndex("TileId");

                    b.ToTable("Combat", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Combats.CombatDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CombatId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.HasIndex("CombatId");

                    b.ToTable("CombatDetail", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Combats.CombatLoot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<double>("UnsecuredDcx")
                        .HasPrecision(12, 9)
                        .HasColumnType("float(12)");

                    b.HasKey("Id");

                    b.ToTable("CombatLoot", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Combats.HeroSkillCasted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActiveUntilTurn")
                        .HasColumnType("int");

                    b.Property<int?>("CombatId")
                        .HasColumnType("int");

                    b.Property<int>("SkillCastedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CombatId");

                    b.HasIndex("SkillCastedId");

                    b.ToTable("HeroSkillCasted", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.GameStates.GameState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CombatId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentZoneId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CombatId");

                    b.HasIndex("CurrentZoneId");

                    b.HasIndex("HeroId");

                    b.ToTable("GameState", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.Hero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Generation")
                        .HasColumnType("int");

                    b.Property<string>("HeroClass")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("HeroNameId")
                        .HasColumnType("int");

                    b.Property<int>("HeroTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("ImageBaseUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAscended")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHearthstoneAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SkillPoints")
                        .HasColumnType("int");

                    b.Property<int>("UnusedDailyQuests")
                        .HasColumnType("int");

                    b.Property<int>("UnusedSkillPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeroNameId");

                    b.HasIndex("HeroTemplateId");

                    b.HasIndex("LevelId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Hero", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroCombatStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BaseAgility")
                        .HasColumnType("int");

                    b.Property<int>("BaseCharisma")
                        .HasColumnType("int");

                    b.Property<int>("BaseHitPoints")
                        .HasColumnType("int");

                    b.Property<int>("BaseQuickness")
                        .HasColumnType("int");

                    b.Property<int>("BaseStrength")
                        .HasColumnType("int");

                    b.Property<int>("BaseWisdom")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("int");

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnusedStats")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.ToTable("HeroCombatStats");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AdditionalQuests")
                        .HasColumnType("int");

                    b.Property<int>("MaxExperiencePoints")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Number")
                        .IsUnique();

                    b.ToTable("HeroLevel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalQuests = 0,
                            MaxExperiencePoints = 20,
                            Number = 1
                        },
                        new
                        {
                            Id = 2,
                            AdditionalQuests = 0,
                            MaxExperiencePoints = 41,
                            Number = 2
                        },
                        new
                        {
                            Id = 3,
                            AdditionalQuests = 1,
                            MaxExperiencePoints = 63,
                            Number = 3
                        },
                        new
                        {
                            Id = 4,
                            AdditionalQuests = 1,
                            MaxExperiencePoints = 86,
                            Number = 4
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HeroName", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Legolas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aragon"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gandalf"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Harry Potter"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Snape"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dumbeldor"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Voldermort"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Sauron"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Gimly"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Samwise"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("HeroId")
                        .HasColumnType("int");

                    b.Property<int>("SkillTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.HasIndex("SkillTemplateId");

                    b.ToTable("HeroSkill", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroSkillEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HeroSkillTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TurnDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeroSkillTemplateId");

                    b.ToTable("HeroSkillEffect");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroSkillTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeroClass")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsStartingSkill")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HeroSkillTemplate", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroSkillTemplateZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HeroSkillTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeroSkillTemplateId");

                    b.HasIndex("ZoneId");

                    b.ToTable("HeroSkillTemplateZone");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageBaseUrl")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalDailyQuests")
                        .HasColumnType("int");

                    b.Property<int>("TotalSkillPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HeroTemplate", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "HeroTemplateSeed",
                            DateCreated = new DateTime(2022, 9, 15, 23, 7, 27, 204, DateTimeKind.Local).AddTicks(2818),
                            ImageBaseUrl = "/img/api/heroes/",
                            IsActive = true,
                            MaxHitPoints = 25,
                            TotalDailyQuests = 20,
                            TotalSkillPoints = 20
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.ArmorAffix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int>("GearAffixTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("SlotType")
                        .HasColumnType("int");

                    b.Property<int>("TierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("GearAffixTemplateId");

                    b.HasIndex("TierId");

                    b.ToTable("ArmorAffix", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.GearAffixArmorSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArmorSlotType")
                        .HasColumnType("int");

                    b.Property<int>("GearAffixTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GearAffixTemplateId");

                    b.ToTable("GearAffixArmorSlot");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.GearAffixTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("EffectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GearAffixTemplate", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Effect = "Draining",
                            EffectDescription = "Integer Lifesteal"
                        },
                        new
                        {
                            Id = 2,
                            Effect = "Truthful",
                            EffectDescription = "Increases chance to hit"
                        },
                        new
                        {
                            Id = 3,
                            Effect = "Disarming",
                            EffectDescription = "Chance to have monster do 50% reduced damage for next attack."
                        },
                        new
                        {
                            Id = 4,
                            Effect = "Savage",
                            EffectDescription = "Deal increased integer damage on subsequent hits."
                        },
                        new
                        {
                            Id = 5,
                            Effect = "Stunning",
                            EffectDescription = "Chance to have monster unable to use special attack next turn and has 50% reduced dodge next turn as well"
                        },
                        new
                        {
                            Id = 6,
                            Effect = "Quick",
                            EffectDescription = "Increase to dodge."
                        },
                        new
                        {
                            Id = 7,
                            Effect = "Thick",
                            EffectDescription = "Increase to armor mitigation."
                        },
                        new
                        {
                            Id = 8,
                            Effect = "Reflective",
                            EffectDescription = "Integer return of damage when hit."
                        },
                        new
                        {
                            Id = 9,
                            Effect = "Recovering",
                            EffectDescription = "Recovers HP after battle is completed."
                        },
                        new
                        {
                            Id = 10,
                            Effect = "Deft",
                            EffectDescription = "Increased parry %"
                        },
                        new
                        {
                            Id = 11,
                            Effect = "Doubling",
                            EffectDescription = "Increased % chance to swing twice."
                        },
                        new
                        {
                            Id = 12,
                            Effect = "Fetching",
                            EffectDescription = "Increased Charisma"
                        },
                        new
                        {
                            Id = 13,
                            Effect = "Strong",
                            EffectDescription = "Increased Strength"
                        },
                        new
                        {
                            Id = 14,
                            Effect = "Agile",
                            EffectDescription = "Increased Agility"
                        },
                        new
                        {
                            Id = 15,
                            Effect = "Wise",
                            EffectDescription = "Increased Wisdom"
                        },
                        new
                        {
                            Id = 16,
                            Effect = "Vital",
                            EffectDescription = "Increased HP"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.GearAffixTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("GearAffixTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GearAffixTemplateId");

                    b.HasIndex("ZoneId");

                    b.ToTable("GearAffixTier");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 1.0,
                            GearAffixTemplateId = 1,
                            Type = 1,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 1.0,
                            GearAffixTemplateId = 1,
                            Type = 2,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 2.0,
                            GearAffixTemplateId = 1,
                            Type = 3,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 2.0,
                            GearAffixTemplateId = 1,
                            Type = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 2.0,
                            GearAffixTemplateId = 1,
                            Type = 1,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 6,
                            Amount = 2.0,
                            GearAffixTemplateId = 1,
                            Type = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 7,
                            Amount = 3.0,
                            GearAffixTemplateId = 1,
                            Type = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 8,
                            Amount = 4.0,
                            GearAffixTemplateId = 1,
                            Type = 4,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 9,
                            Amount = 0.5,
                            GearAffixTemplateId = 2,
                            Type = 1,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 10,
                            Amount = 1.0,
                            GearAffixTemplateId = 2,
                            Type = 2,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 11,
                            Amount = 1.5,
                            GearAffixTemplateId = 2,
                            Type = 3,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 12,
                            Amount = 2.0,
                            GearAffixTemplateId = 2,
                            Type = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 13,
                            Amount = 0.75,
                            GearAffixTemplateId = 2,
                            Type = 1,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 14,
                            Amount = 1.25,
                            GearAffixTemplateId = 2,
                            Type = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 15,
                            Amount = 1.75,
                            GearAffixTemplateId = 2,
                            Type = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 16,
                            Amount = 2.25,
                            GearAffixTemplateId = 2,
                            Type = 4,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 17,
                            Amount = 1.0,
                            GearAffixTemplateId = 3,
                            Type = 1,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 18,
                            Amount = 2.0,
                            GearAffixTemplateId = 3,
                            Type = 2,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 19,
                            Amount = 3.0,
                            GearAffixTemplateId = 3,
                            Type = 3,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 20,
                            Amount = 4.0,
                            GearAffixTemplateId = 3,
                            Type = 4,
                            ZoneId = 1
                        },
                        new
                        {
                            Id = 21,
                            Amount = 2.0,
                            GearAffixTemplateId = 3,
                            Type = 1,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 22,
                            Amount = 3.0,
                            GearAffixTemplateId = 3,
                            Type = 2,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 23,
                            Amount = 4.0,
                            GearAffixTemplateId = 3,
                            Type = 3,
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 24,
                            Amount = 5.0,
                            GearAffixTemplateId = 3,
                            Type = 4,
                            ZoneId = 2
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.GearAffixWeaponSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GearAffixTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("WeaponSlotType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("GearAffixTemplateId");

                    b.ToTable("GearAffixWeaponSlot", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GearAffixTemplateId = 1,
                            WeaponSlotType = "PrimaryHand"
                        },
                        new
                        {
                            Id = 2,
                            GearAffixTemplateId = 1,
                            WeaponSlotType = "TwoHand"
                        },
                        new
                        {
                            Id = 3,
                            GearAffixTemplateId = 2,
                            WeaponSlotType = "PrimaryHand"
                        },
                        new
                        {
                            Id = 4,
                            GearAffixTemplateId = 2,
                            WeaponSlotType = "TwoHand"
                        },
                        new
                        {
                            Id = 5,
                            GearAffixTemplateId = 3,
                            WeaponSlotType = "PrimaryHand"
                        },
                        new
                        {
                            Id = 6,
                            GearAffixTemplateId = 3,
                            WeaponSlotType = "TwoHand"
                        },
                        new
                        {
                            Id = 7,
                            GearAffixTemplateId = 4,
                            WeaponSlotType = "PrimaryHand"
                        },
                        new
                        {
                            Id = 8,
                            GearAffixTemplateId = 4,
                            WeaponSlotType = "TwoHand"
                        },
                        new
                        {
                            Id = 9,
                            GearAffixTemplateId = 5,
                            WeaponSlotType = "PrimaryHand"
                        },
                        new
                        {
                            Id = 10,
                            GearAffixTemplateId = 5,
                            WeaponSlotType = "TwoHand"
                        },
                        new
                        {
                            Id = 11,
                            GearAffixTemplateId = 13,
                            WeaponSlotType = "PrimaryHand"
                        },
                        new
                        {
                            Id = 12,
                            GearAffixTemplateId = 13,
                            WeaponSlotType = "TwoHand"
                        },
                        new
                        {
                            Id = 13,
                            GearAffixTemplateId = 14,
                            WeaponSlotType = "PrimaryHand"
                        },
                        new
                        {
                            Id = 14,
                            GearAffixTemplateId = 14,
                            WeaponSlotType = "TwoHand"
                        },
                        new
                        {
                            Id = 15,
                            GearAffixTemplateId = 15,
                            WeaponSlotType = "PrimaryHand"
                        },
                        new
                        {
                            Id = 16,
                            GearAffixTemplateId = 15,
                            WeaponSlotType = "TwoHand"
                        },
                        new
                        {
                            Id = 17,
                            GearAffixTemplateId = 16,
                            WeaponSlotType = "PrimaryHand"
                        },
                        new
                        {
                            Id = 18,
                            GearAffixTemplateId = 16,
                            WeaponSlotType = "TwoHand"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.HeroInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Dcx")
                        .HasPrecision(12, 9)
                        .HasColumnType("decimal(12,9)");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<int>("MaxAvailableSlots")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HeroId")
                        .IsUnique();

                    b.ToTable("HeroInventory", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.HeroStatModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArmorTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("EffectAmount")
                        .HasColumnType("int");

                    b.Property<int>("StatType")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorTemplateId");

                    b.HasIndex("WeaponTemplateId");

                    b.ToTable("HeroStatModifier");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.HeroStatModifierResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int>("EffectAmount")
                        .HasColumnType("int");

                    b.Property<int>("HeroStatEffectedId")
                        .HasColumnType("int");

                    b.Property<int>("StatType")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("WeaponId");

                    b.ToTable("HeroStatModifierResult");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.MonsterItemLoot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ArmorTemplateId")
                        .HasColumnType("int");

                    b.Property<double>("LootDropChance")
                        .HasColumnType("float");

                    b.Property<int>("MonsterTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("NftItemTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArmorTemplateId");

                    b.HasIndex("MonsterTemplateId");

                    b.HasIndex("NftItemTemplateId");

                    b.HasIndex("WeaponTemplateId");

                    b.ToTable("MonsterItemLoot", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LootDropChance = 50.0,
                            MonsterTemplateId = 1,
                            WeaponTemplateId = 4
                        },
                        new
                        {
                            Id = 2,
                            LootDropChance = 50.0,
                            MonsterTemplateId = 1,
                            WeaponTemplateId = 5
                        },
                        new
                        {
                            Id = 3,
                            LootDropChance = 50.0,
                            MonsterTemplateId = 2,
                            WeaponTemplateId = 4
                        },
                        new
                        {
                            Id = 4,
                            LootDropChance = 50.0,
                            MonsterTemplateId = 2,
                            WeaponTemplateId = 5
                        },
                        new
                        {
                            Id = 5,
                            LootDropChance = 50.0,
                            MonsterTemplateId = 3,
                            WeaponTemplateId = 4
                        },
                        new
                        {
                            Id = 6,
                            LootDropChance = 50.0,
                            MonsterTemplateId = 3,
                            WeaponTemplateId = 5
                        },
                        new
                        {
                            Id = 7,
                            LootDropChance = 50.0,
                            MonsterTemplateId = 4,
                            WeaponTemplateId = 4
                        },
                        new
                        {
                            Id = 8,
                            LootDropChance = 50.0,
                            MonsterTemplateId = 4,
                            WeaponTemplateId = 5
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.NftItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CombatLootId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HeroInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NftItemTemplateId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerBackpackId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("SlotNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CombatLootId");

                    b.HasIndex("HeroInventoryId");

                    b.HasIndex("NftItemTemplateId");

                    b.HasIndex("PlayerBackpackId");

                    b.ToTable("NftItem");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.NftItemTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DcxCostToOpen")
                        .HasPrecision(12, 9)
                        .HasColumnType("decimal(12,9)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GoldCostToOpen")
                        .HasColumnType("int");

                    b.Property<string>("ImageBaseUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("NftItemTemplate", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DcxCostToOpen = 1m,
                            Description = "Shiny golden egg",
                            GoldCostToOpen = 200,
                            ImageBaseUrl = "/images/items/nft/hero_egg",
                            Name = "Hero Egg",
                            Type = "Shard"
                        },
                        new
                        {
                            Id = 2,
                            DcxCostToOpen = 1m,
                            Description = "Book of mystic arts",
                            GoldCostToOpen = 200,
                            ImageBaseUrl = "/images/items/nft/skill_book",
                            Name = "Skill Book",
                            Type = "Skillbook"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.PlayerBackpack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("SecuredDcx")
                        .HasPrecision(12, 9)
                        .HasColumnType("decimal(12,9)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("PlayerBackpack", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.WeaponAffix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GearAffixTemplateId")
                        .HasColumnType("int");

                    b.Property<int>("SlotType")
                        .HasColumnType("int");

                    b.Property<int>("TierId")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GearAffixTemplateId");

                    b.HasIndex("TierId");

                    b.HasIndex("WeaponId");

                    b.ToTable("WeaponAffix", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Charisma")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CriticalHitChance")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DodgeRate")
                        .HasColumnType("int");

                    b.Property<int>("HitPoints")
                        .HasColumnType("int");

                    b.Property<int>("HitRate")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int");

                    b.Property<double>("MitigationMagic")
                        .HasColumnType("float");

                    b.Property<double>("MitigationMelee")
                        .HasColumnType("float");

                    b.Property<double>("MitigationRange")
                        .HasColumnType("float");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MonsterTemplateId")
                        .HasColumnType("int");

                    b.Property<double>("ParryChance")
                        .HasColumnType("float");

                    b.Property<int>("PersonalityId")
                        .HasColumnType("int");

                    b.Property<double>("Power")
                        .HasColumnType("float");

                    b.Property<double>("Quickness")
                        .HasColumnType("float");

                    b.Property<double>("SpecialAbilityCastChance")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MonsterTemplateId");

                    b.HasIndex("PersonalityId");

                    b.ToTable("Monster", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MonsterPersonalityId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("MonsterPersonalityId");

                    b.ToTable("MonsterAttribute", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MonsterPersonalityId = 1,
                            Type = "Charisma"
                        },
                        new
                        {
                            Id = 2,
                            MonsterPersonalityId = 2,
                            Type = "Charisma"
                        },
                        new
                        {
                            Id = 3,
                            MonsterPersonalityId = 3,
                            Type = "Power"
                        },
                        new
                        {
                            Id = 4,
                            MonsterPersonalityId = 4,
                            Type = "Power"
                        },
                        new
                        {
                            Id = 5,
                            MonsterPersonalityId = 5,
                            Type = "Quickness"
                        },
                        new
                        {
                            Id = 6,
                            MonsterPersonalityId = 6,
                            Type = "Quickness"
                        },
                        new
                        {
                            Id = 7,
                            MonsterPersonalityId = 7,
                            Type = "SpecialAbilityChance"
                        },
                        new
                        {
                            Id = 8,
                            MonsterPersonalityId = 8,
                            Type = "SpecialAbilityChance"
                        },
                        new
                        {
                            Id = 9,
                            MonsterPersonalityId = 9,
                            Type = "CriticalHitChance"
                        },
                        new
                        {
                            Id = 10,
                            MonsterPersonalityId = 10,
                            Type = "CriticalHitChance"
                        },
                        new
                        {
                            Id = 11,
                            MonsterPersonalityId = 11,
                            Type = "Charisma"
                        },
                        new
                        {
                            Id = 12,
                            MonsterPersonalityId = 11,
                            Type = "Power"
                        },
                        new
                        {
                            Id = 13,
                            MonsterPersonalityId = 11,
                            Type = "Quickness"
                        },
                        new
                        {
                            Id = 14,
                            MonsterPersonalityId = 11,
                            Type = "SpecialAbilityChance"
                        },
                        new
                        {
                            Id = 15,
                            MonsterPersonalityId = 11,
                            Type = "CriticalHitChance"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterPersonality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("EffectAmount")
                        .HasColumnType("float");

                    b.Property<double>("EffectChance")
                        .HasColumnType("float");

                    b.Property<string>("PersonalityType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("MonsterPersonality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EffectAmount = -30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Sickly"
                        },
                        new
                        {
                            Id = 2,
                            EffectAmount = 30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Inspired"
                        },
                        new
                        {
                            Id = 3,
                            EffectAmount = -30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Fatigued"
                        },
                        new
                        {
                            Id = 4,
                            EffectAmount = 30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Brutal"
                        },
                        new
                        {
                            Id = 5,
                            EffectAmount = -30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Lazy"
                        },
                        new
                        {
                            Id = 6,
                            EffectAmount = 30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Lean"
                        },
                        new
                        {
                            Id = 7,
                            EffectAmount = -30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Stupid"
                        },
                        new
                        {
                            Id = 8,
                            EffectAmount = 30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Arcane"
                        },
                        new
                        {
                            Id = 9,
                            EffectAmount = -30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Impotent"
                        },
                        new
                        {
                            Id = 10,
                            EffectAmount = 30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Reckless"
                        },
                        new
                        {
                            Id = 11,
                            EffectAmount = 30.0,
                            EffectChance = 7.0,
                            PersonalityType = "Deadly"
                        },
                        new
                        {
                            Id = 12,
                            EffectAmount = 0.0,
                            EffectChance = 23.0,
                            PersonalityType = "None"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterSpecialAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("CanCastAgain")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsGuaranteedDamage")
                        .HasColumnType("bit");

                    b.Property<int>("MonsterTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("UsesTurn")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MonsterTemplateId");

                    b.ToTable("MonsterSpecialAbility");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CanCastAgain = true,
                            Description = "The goblin rotates furiously, attacking with both daggers in a flurry of condensed rage.",
                            IsGuaranteedDamage = false,
                            MonsterTemplateId = 1,
                            Name = "Whirly Gig",
                            UsesTurn = true
                        },
                        new
                        {
                            Id = 2,
                            CanCastAgain = true,
                            Description = "The runes on his axe glow distractingly, and you find it harder to focus on your own weapon work.",
                            IsGuaranteedDamage = false,
                            MonsterTemplateId = 2,
                            Name = "Runic Axe",
                            UsesTurn = false
                        },
                        new
                        {
                            Id = 3,
                            CanCastAgain = true,
                            Description = "Slavering, the wolf bites you with its foaming maw.",
                            IsGuaranteedDamage = false,
                            MonsterTemplateId = 3,
                            Name = "Savage Bite",
                            UsesTurn = true
                        },
                        new
                        {
                            Id = 4,
                            CanCastAgain = false,
                            Description = "The countenance of this lord of the forest is staggering. His sheer majesty pushes you away.",
                            IsGuaranteedDamage = false,
                            MonsterTemplateId = 4,
                            Name = "Majesty",
                            UsesTurn = false
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterSpecialAbilityCasted", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActiveUntilRound")
                        .HasColumnType("int");

                    b.Property<int>("EffectId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonsterSpecialAbilityCasted", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterSpecialAbilityEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("EffectWho")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MonsterSpecialAbilityId")
                        .HasColumnType("int");

                    b.Property<int>("TurnDuration")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MonsterSpecialAbilityId");

                    b.ToTable("MonsterSpecialAbilityEffect");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 120,
                            EffectWho = "Monster",
                            MonsterSpecialAbilityId = 1,
                            TurnDuration = 1,
                            Type = "DamageRate"
                        },
                        new
                        {
                            Id = 2,
                            Amount = -50,
                            EffectWho = "Hero",
                            MonsterSpecialAbilityId = 2,
                            TurnDuration = 2,
                            Type = "Parry"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 140,
                            EffectWho = "Monster",
                            MonsterSpecialAbilityId = 3,
                            TurnDuration = 1,
                            Type = "DamageRate"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 10,
                            EffectWho = "Monster",
                            MonsterSpecialAbilityId = 4,
                            TurnDuration = 1,
                            Type = "DodgeRate"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterTemplateOld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AppearanceChance")
                        .HasColumnType("float");

                    b.Property<string>("ArmorDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CharismaOpportunityChance")
                        .HasColumnType("int");

                    b.Property<int>("CombatOpportunityChance")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double>("DcxLootChance")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("GoldLootChance")
                        .HasColumnType("float");

                    b.Property<string>("ImageFilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MonsterClass")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecialAbilityCastChance")
                        .HasColumnType("int");

                    b.Property<int>("TileId")
                        .HasColumnType("int");

                    b.Property<string>("WeaponDescription")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.ToTable("MonsterTemplateOld", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppearanceChance = 20.0,
                            ArmorDescription = "Worn Rags and Leather",
                            CharismaOpportunityChance = 20,
                            CombatOpportunityChance = 10,
                            DcxLootChance = 10.0,
                            Description = "Grumbling, stumbling, filthy and ragged, this little green creature's size does little to hide the wanton violence begging to burst at the first thing that looks at him the wrong way. For better or worse, today that happens to be you.",
                            GoldLootChance = 0.0,
                            ImageFilePath = "\\images\\monsters\\wandering_goblin.jpg",
                            MonsterClass = "Warrior",
                            Name = "Wandering Goblin",
                            SpecialAbilityCastChance = 22,
                            TileId = 1,
                            WeaponDescription = "Dagger"
                        },
                        new
                        {
                            Id = 2,
                            AppearanceChance = 20.0,
                            ArmorDescription = "Chain Shirt",
                            CharismaOpportunityChance = 40,
                            CombatOpportunityChance = 30,
                            DcxLootChance = 20.0,
                            Description = "Ah, a fellow adventurer. Those runes make it look like he has seen a thing or two, and you think you've seen him in town before.",
                            GoldLootChance = 0.0,
                            ImageFilePath = "\\images\\monsters\\rival_adventurer.jpg",
                            MonsterClass = "Ranger",
                            Name = "Rival Adventurer",
                            SpecialAbilityCastChance = 15,
                            TileId = 1,
                            WeaponDescription = "Runed Axe"
                        },
                        new
                        {
                            Id = 3,
                            AppearanceChance = 15.0,
                            ArmorDescription = "something",
                            CharismaOpportunityChance = 25,
                            CombatOpportunityChance = 15,
                            DcxLootChance = 22.0,
                            Description = "It's fearsome. It's gray. It's big, and it's furry. Yep, that's a giant wolf.",
                            GoldLootChance = 0.0,
                            ImageFilePath = "\\images\\monsters\\giant_wolf.jpg",
                            MonsterClass = "Warrior",
                            Name = "Giant Wolf",
                            SpecialAbilityCastChance = 10,
                            TileId = 1,
                            WeaponDescription = "something"
                        },
                        new
                        {
                            Id = 4,
                            AppearanceChance = 15.0,
                            ArmorDescription = "Rough Hide",
                            CharismaOpportunityChance = 25,
                            CombatOpportunityChance = 15,
                            DcxLootChance = 50.0,
                            Description = "A mighty stag stands before you, and you feel the absurd urge to kneel before such a princely animal.",
                            GoldLootChance = 0.0,
                            ImageFilePath = "\\images\\monsters\\mighty_stag.jpg",
                            MonsterClass = "Warrior",
                            Name = "Mighty Stag",
                            SpecialAbilityCastChance = 30,
                            TileId = 1,
                            WeaponDescription = "Antlers"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Players.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BlockchainPublicAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameSettingId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<Guid>("Nonce")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SignedSignature")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("BlockchainPublicAddress")
                        .IsUnique();

                    b.HasIndex("GameSettingId");

                    b.ToTable("Player", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockchainPublicAddress = "Ox88888888888888889999",
                            CreatedBy = "PlayerSeed",
                            DateCreated = new DateTime(2022, 9, 15, 23, 7, 27, 204, DateTimeKind.Local).AddTicks(3091),
                            GameSettingId = 1,
                            Name = "Test Player 1",
                            Nonce = new Guid("00000000-0000-0000-0000-000000000000"),
                            SignedSignature = "22222222222222"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Players.PlayerGameSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("BypassCombatDiceRolls")
                        .HasColumnType("bit");

                    b.Property<bool>("IsModestyOn")
                        .HasColumnType("bit");

                    b.Property<int>("MaxVolumeLevel")
                        .HasColumnType("int");

                    b.Property<int>("VolumeLevel")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PlayerGameSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BypassCombatDiceRolls = false,
                            IsModestyOn = false,
                            MaxVolumeLevel = 0,
                            VolumeLevel = 0
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Weapons.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double?>("BonusDamage")
                        .HasColumnType("float");

                    b.Property<int?>("CombatLootId")
                        .HasColumnType("int");

                    b.Property<int>("CombatStat")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("CriticalHitRate")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DodgeRate")
                        .HasColumnType("float");

                    b.Property<double?>("DoubleHitRate")
                        .HasColumnType("float");

                    b.Property<int>("HeroInventoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ParryRate")
                        .HasColumnType("float");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("SlotNumber")
                        .HasColumnType("int");

                    b.Property<int>("WeaponTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CombatLootId");

                    b.HasIndex("HeroInventoryId");

                    b.HasIndex("WeaponTemplateId");

                    b.ToTable("Weapon", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Weapons.WeaponTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("HeroClass")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ImageBaseUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsStartingGear")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PurchasePrice")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<string>("SlotType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("WeaponType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WeaponTemplate", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A standard sword for cutting foes",
                            HeroClass = "Warrior",
                            ImageBaseUrl = "/img/api/items/BasicGreatsword.jpg",
                            IsStartingGear = true,
                            Name = "Basic Greatsword",
                            PurchasePrice = 1,
                            SellPrice = 1,
                            SlotType = "TwoHand",
                            WeaponType = "Greatsword"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A standard crossbow for poking holes into foes",
                            HeroClass = "Ranger",
                            ImageBaseUrl = "/images/items/weapons/BasicCrossbow.jpg",
                            IsStartingGear = true,
                            Name = "Basic Crossbow",
                            PurchasePrice = 1,
                            SellPrice = 1,
                            SlotType = "TwoHand",
                            WeaponType = "Crossbow"
                        },
                        new
                        {
                            Id = 3,
                            Description = "A standard staff for casting magic",
                            HeroClass = "Mage",
                            ImageBaseUrl = "/images/items/weapons/BasicStaff.jpg",
                            IsStartingGear = true,
                            Name = "Basic Staff",
                            PurchasePrice = 1,
                            SellPrice = 1,
                            SlotType = "TwoHand",
                            WeaponType = "Staff"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Stabs things",
                            HeroClass = "Ranger",
                            ImageBaseUrl = "/images/items/weapons/simple-shortsword",
                            IsStartingGear = false,
                            Name = "Simple Shortsword",
                            PurchasePrice = 1,
                            SellPrice = 1,
                            SlotType = "PrimaryHand",
                            WeaponType = "Staff"
                        },
                        new
                        {
                            Id = 5,
                            Description = "chops things",
                            HeroClass = "Warrior",
                            ImageBaseUrl = "/images/items/weapons/runed-axe",
                            IsStartingGear = false,
                            Name = "Runed Axe",
                            PurchasePrice = 1,
                            SellPrice = 1,
                            SlotType = "PrimaryHand",
                            WeaponType = "Handaxe"
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Zones.DiscoveredTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HeroId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("TileId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TileId");

                    b.HasIndex("HeroId", "TileId")
                        .IsUnique();

                    b.ToTable("DiscoveredTile", (string)null);
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Zones.Tile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Tile", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Enchanted Fields",
                            Order = 1,
                            Type = "RegularCombat",
                            ZoneId = 2
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sylvan Woodlands",
                            Order = 1,
                            Type = "RegularCombat",
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pilgrims' Clearing",
                            Order = 2,
                            Type = "DailyCombat",
                            ZoneId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Odorous Bog",
                            Order = 1,
                            Type = "RegularCombat",
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ancient Battlefield",
                            Order = 2,
                            Type = "DailyCombat",
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 6,
                            Name = "Terrorswamp",
                            Order = 3,
                            Type = "Boss",
                            ZoneId = 4
                        },
                        new
                        {
                            Id = 7,
                            Name = "Mountain Fortress",
                            Order = 1,
                            Type = "RegularCombat",
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 8,
                            Name = "Griffon's Nest",
                            Order = 2,
                            Type = "DailyCombat",
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 9,
                            Name = "Summoner's Summit",
                            Order = 3,
                            Type = "Boss",
                            ZoneId = 5
                        },
                        new
                        {
                            Id = 10,
                            Name = "Labyrinthian Dungeon",
                            Order = 1,
                            Type = "RegularCombat",
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 11,
                            Name = "Slaver Row",
                            Order = 2,
                            Type = "DailyCombat",
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 12,
                            Name = "Wing of the Jailer",
                            Order = 3,
                            Type = "Boss",
                            ZoneId = 6
                        },
                        new
                        {
                            Id = 13,
                            Name = "Laboratory of the Archmagus",
                            Order = 4,
                            Type = "FinalBoss",
                            ZoneId = 6
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Zones.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("LoreEncountersRequired")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Zone", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LoreEncountersRequired = 0,
                            Name = "Aedos",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            LoreEncountersRequired = 2,
                            Name = "Wild Prairie",
                            Order = 2
                        },
                        new
                        {
                            Id = 3,
                            LoreEncountersRequired = 3,
                            Name = "Mysterious Forest",
                            Order = 3
                        },
                        new
                        {
                            Id = 4,
                            LoreEncountersRequired = 4,
                            Name = "Foul Wastes",
                            Order = 4
                        },
                        new
                        {
                            Id = 5,
                            LoreEncountersRequired = 5,
                            Name = "Treacherous Peaks",
                            Order = 5
                        },
                        new
                        {
                            Id = 6,
                            LoreEncountersRequired = 6,
                            Name = "Dark Tower",
                            Order = 6
                        });
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Armors.Armor", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Armors.ArmorTemplate", "ArmorTemplate")
                        .WithMany()
                        .HasForeignKey("ArmorTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Combats.CombatLoot", null)
                        .WithMany("Armor")
                        .HasForeignKey("CombatLootId");

                    b.HasOne("DragonsCrossing.Domain.Items.HeroInventory", null)
                        .WithMany("Armors")
                        .HasForeignKey("HeroInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorTemplate");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Armors.ArmorTemplate", b =>
                {
                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "CriticalHit", b1 =>
                        {
                            b1.Property<int>("ArmorTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("ArmorTemplateId");

                            b1.ToTable("ArmorTemplate");

                            b1.WithOwner()
                                .HasForeignKey("ArmorTemplateId");

                            b1.HasData(
                                new
                                {
                                    ArmorTemplateId = 1,
                                    Max = 1.0,
                                    Min = 0.5
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "Defense", b1 =>
                        {
                            b1.Property<int>("ArmorTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("ArmorTemplateId");

                            b1.ToTable("ArmorTemplate");

                            b1.WithOwner()
                                .HasForeignKey("ArmorTemplateId");

                            b1.HasData(
                                new
                                {
                                    ArmorTemplateId = 1,
                                    Max = 2.75,
                                    Min = 2.75
                                });
                        });

                    b.Navigation("CriticalHit");

                    b.Navigation("Defense")
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Combats.Combat", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Combats.CombatLoot", "CombatLoot")
                        .WithMany()
                        .HasForeignKey("CombatLootId");

                    b.HasOne("DragonsCrossing.Domain.Heroes.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Monsters.Monster", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Zones.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CombatLoot");

                    b.Navigation("Hero");

                    b.Navigation("Monster");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Combats.CombatDetail", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Combats.Combat", null)
                        .WithMany("CombatDetails")
                        .HasForeignKey("CombatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Combats.HeroSkillCasted", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Combats.Combat", null)
                        .WithMany("HeroSkillsCasted")
                        .HasForeignKey("CombatId");

                    b.HasOne("DragonsCrossing.Domain.Heroes.HeroSkill", "SkillCasted")
                        .WithMany()
                        .HasForeignKey("SkillCastedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SkillCasted");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.GameStates.GameState", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Combats.Combat", "Combat")
                        .WithMany()
                        .HasForeignKey("CombatId");

                    b.HasOne("DragonsCrossing.Domain.Zones.Zone", "CurrentZone")
                        .WithMany()
                        .HasForeignKey("CurrentZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Heroes.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combat");

                    b.Navigation("CurrentZone");

                    b.Navigation("Hero");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.Hero", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Heroes.HeroName", "HeroName")
                        .WithMany()
                        .HasForeignKey("HeroNameId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Heroes.HeroTemplate", "HeroTemplate")
                        .WithMany()
                        .HasForeignKey("HeroTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Heroes.HeroLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Players.Player", null)
                        .WithMany("Heroes")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HeroName");

                    b.Navigation("HeroTemplate");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroCombatStats", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Heroes.Hero", null)
                        .WithOne("CombatStats")
                        .HasForeignKey("DragonsCrossing.Domain.Heroes.HeroCombatStats", "HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroSkill", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Heroes.Hero", null)
                        .WithMany("Skills")
                        .HasForeignKey("HeroId");

                    b.HasOne("DragonsCrossing.Domain.Heroes.HeroSkillTemplate", "SkillTemplate")
                        .WithMany()
                        .HasForeignKey("SkillTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SkillTemplate");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroSkillEffect", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Heroes.HeroSkillTemplate", null)
                        .WithMany("Effects")
                        .HasForeignKey("HeroSkillTemplateId");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroSkillTemplateZone", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Heroes.HeroSkillTemplate", null)
                        .WithMany("Zones")
                        .HasForeignKey("HeroSkillTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Zones.Zone", null)
                        .WithMany("HeroSkillsAllowed")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroTemplate", b =>
                {
                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "NoWeaponDamage", b1 =>
                        {
                            b1.Property<int>("HeroTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("HeroTemplateId");

                            b1.ToTable("HeroTemplate");

                            b1.WithOwner()
                                .HasForeignKey("HeroTemplateId");

                            b1.HasData(
                                new
                                {
                                    HeroTemplateId = 1,
                                    Max = 4.0,
                                    Min = 1.0
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "StartingStatPointsEachStat", b1 =>
                        {
                            b1.Property<int>("HeroTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("HeroTemplateId");

                            b1.ToTable("HeroTemplate");

                            b1.WithOwner()
                                .HasForeignKey("HeroTemplateId");

                            b1.HasData(
                                new
                                {
                                    HeroTemplateId = 1,
                                    Max = 10,
                                    Min = 4
                                });
                        });

                    b.Navigation("NoWeaponDamage")
                        .IsRequired();

                    b.Navigation("StartingStatPointsEachStat")
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.ArmorAffix", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Armors.Armor", null)
                        .WithMany("Affixes")
                        .HasForeignKey("ArmorId");

                    b.HasOne("DragonsCrossing.Domain.Items.GearAffixTemplate", "GearAffixTemplate")
                        .WithMany()
                        .HasForeignKey("GearAffixTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Items.GearAffixTier", "Tier")
                        .WithMany()
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GearAffixTemplate");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.GearAffixArmorSlot", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Items.GearAffixTemplate", null)
                        .WithMany("ArmorSlots")
                        .HasForeignKey("GearAffixTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.GearAffixTier", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Items.GearAffixTemplate", null)
                        .WithMany("Tiers")
                        .HasForeignKey("GearAffixTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Zones.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.GearAffixWeaponSlot", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Items.GearAffixTemplate", null)
                        .WithMany("WeaponSlots")
                        .HasForeignKey("GearAffixTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.HeroInventory", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Heroes.Hero", "Hero")
                        .WithOne("Inventory")
                        .HasForeignKey("DragonsCrossing.Domain.Items.HeroInventory", "HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hero");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.HeroStatModifier", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Armors.ArmorTemplate", null)
                        .WithMany("HeroStatModifiers")
                        .HasForeignKey("ArmorTemplateId");

                    b.HasOne("DragonsCrossing.Domain.Weapons.WeaponTemplate", null)
                        .WithMany("HeroStatModifiers")
                        .HasForeignKey("WeaponTemplateId");

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "EffectAmountOffsetRange", b1 =>
                        {
                            b1.Property<int>("HeroStatModifierId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("HeroStatModifierId");

                            b1.ToTable("HeroStatModifier");

                            b1.WithOwner()
                                .HasForeignKey("HeroStatModifierId");
                        });

                    b.Navigation("EffectAmountOffsetRange")
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.HeroStatModifierResult", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Armors.Armor", null)
                        .WithMany("HeroStatsModifierResults")
                        .HasForeignKey("ArmorId");

                    b.HasOne("DragonsCrossing.Domain.Weapons.Weapon", null)
                        .WithMany("HeroStatsModifierResults")
                        .HasForeignKey("WeaponId");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.MonsterItemLoot", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Armors.ArmorTemplate", "ArmorTemplate")
                        .WithMany()
                        .HasForeignKey("ArmorTemplateId");

                    b.HasOne("DragonsCrossing.Domain.Monsters.MonsterTemplateOld", null)
                        .WithMany("ItemsLoot")
                        .HasForeignKey("MonsterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Items.NftItemTemplate", "NftItemTemplate")
                        .WithMany()
                        .HasForeignKey("NftItemTemplateId");

                    b.HasOne("DragonsCrossing.Domain.Weapons.WeaponTemplate", "WeaponTemplate")
                        .WithMany()
                        .HasForeignKey("WeaponTemplateId");

                    b.Navigation("ArmorTemplate");

                    b.Navigation("NftItemTemplate");

                    b.Navigation("WeaponTemplate");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.NftItem", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Combats.CombatLoot", null)
                        .WithMany("NftItems")
                        .HasForeignKey("CombatLootId");

                    b.HasOne("DragonsCrossing.Domain.Items.HeroInventory", null)
                        .WithMany("NftItems")
                        .HasForeignKey("HeroInventoryId");

                    b.HasOne("DragonsCrossing.Domain.Items.NftItemTemplate", "NftItemTemplate")
                        .WithMany()
                        .HasForeignKey("NftItemTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Items.PlayerBackpack", null)
                        .WithMany("NftItems")
                        .HasForeignKey("PlayerBackpackId");

                    b.Navigation("NftItemTemplate");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.PlayerBackpack", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Players.Player", null)
                        .WithOne("Backpack")
                        .HasForeignKey("DragonsCrossing.Domain.Items.PlayerBackpack", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.WeaponAffix", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Items.GearAffixTemplate", "GearAffixTemplate")
                        .WithMany()
                        .HasForeignKey("GearAffixTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Items.GearAffixTier", "Tier")
                        .WithMany()
                        .HasForeignKey("TierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Weapons.Weapon", null)
                        .WithMany("Affixes")
                        .HasForeignKey("WeaponId");

                    b.Navigation("GearAffixTemplate");

                    b.Navigation("Tier");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.Monster", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Monsters.MonsterTemplateOld", "MonsterTemplateOld")
                        .WithMany()
                        .HasForeignKey("MonsterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Monsters.MonsterPersonality", "Personality")
                        .WithMany()
                        .HasForeignKey("PersonalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonsterTemplateOld");

                    b.Navigation("Personality");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterAttribute", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Monsters.MonsterPersonality", null)
                        .WithMany("AttributesAffected")
                        .HasForeignKey("MonsterPersonalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterSpecialAbility", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Monsters.MonsterTemplateOld", null)
                        .WithMany("SpecialAbilities")
                        .HasForeignKey("MonsterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterSpecialAbilityCasted", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Monsters.MonsterSpecialAbilityEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Monsters.Monster", null)
                        .WithMany("SpecialAbilitiesCasted")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterSpecialAbilityEffect", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Monsters.MonsterSpecialAbility", null)
                        .WithMany("Effects")
                        .HasForeignKey("MonsterSpecialAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterTemplateOld", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Zones.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "Charisma", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 7,
                                    Min = 2
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 9,
                                    Min = 5
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 12,
                                    Min = 6
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 12,
                                    Min = 6
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "CriticalHitChance", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 3.0,
                                    Min = 1.0
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 5.0,
                                    Min = 2.0
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 8.0,
                                    Min = 4.0
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 8.0,
                                    Min = 4.0
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "Damage", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 9,
                                    Min = 2
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 6,
                                    Min = 2
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 7,
                                    Min = 2
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 7,
                                    Min = 2
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "DcxLootAmount", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 1.8300000000000001,
                                    Min = 1.23
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 1.9299999999999999,
                                    Min = 1.3300000000000001
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 1.8600000000000001,
                                    Min = 1.4299999999999999
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 2.2200000000000002,
                                    Min = 1.53
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "DodgeRate", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 43,
                                    Min = 37
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 22,
                                    Min = 10
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 40,
                                    Min = 30
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 40,
                                    Min = 30
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "GoldLootAmount", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 2,
                                    Min = 1
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 2,
                                    Min = 1
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 3,
                                    Min = 2
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 4,
                                    Min = 2
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "HitRate", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 5,
                                    Min = 0
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 45,
                                    Min = 38
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 45,
                                    Min = 38
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 45,
                                    Min = 38
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "Level", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 3,
                                    Min = 1
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 4,
                                    Min = 1
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 4,
                                    Min = 1
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 4,
                                    Min = 2
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "MaxHitPoints", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 35,
                                    Min = 30
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 50,
                                    Min = 40
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 60,
                                    Min = 40
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 60,
                                    Min = 40
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "MitigationMagic", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 10.0,
                                    Min = 0.0
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 0.0,
                                    Min = 0.0
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 15.0,
                                    Min = 0.0
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 15.0,
                                    Min = 0.0
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "MitigationMelee", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 10.0,
                                    Min = 0.0
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 20.0,
                                    Min = 10.0
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 15.0,
                                    Min = 0.0
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 15.0,
                                    Min = 0.0
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "MitigationRange", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 20.0,
                                    Min = 10.0
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 20.0,
                                    Min = 10.0
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 15.0,
                                    Min = 0.0
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 15.0,
                                    Min = 0.0
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "ParryChance", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 2.0,
                                    Min = 1.0
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 10.0,
                                    Min = 5.0
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 8.0,
                                    Min = 4.0
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 8.0,
                                    Min = 4.0
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "Power", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 9,
                                    Min = 2
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 7,
                                    Min = 3
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 5,
                                    Min = 4
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 5,
                                    Min = 4
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "Quickness", b1 =>
                        {
                            b1.Property<int>("MonsterTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("MonsterTemplateId");

                            b1.ToTable("MonsterTemplateOld");

                            b1.WithOwner()
                                .HasForeignKey("MonsterTemplateId");

                            b1.HasData(
                                new
                                {
                                    MonsterTemplateId = 1,
                                    Max = 12,
                                    Min = 2
                                },
                                new
                                {
                                    MonsterTemplateId = 2,
                                    Max = 12,
                                    Min = 2
                                },
                                new
                                {
                                    MonsterTemplateId = 3,
                                    Max = 12,
                                    Min = 2
                                },
                                new
                                {
                                    MonsterTemplateId = 4,
                                    Max = 12,
                                    Min = 2
                                });
                        });

                    b.Navigation("Charisma")
                        .IsRequired();

                    b.Navigation("CriticalHitChance")
                        .IsRequired();

                    b.Navigation("Damage")
                        .IsRequired();

                    b.Navigation("DcxLootAmount")
                        .IsRequired();

                    b.Navigation("DodgeRate")
                        .IsRequired();

                    b.Navigation("GoldLootAmount")
                        .IsRequired();

                    b.Navigation("HitRate")
                        .IsRequired();

                    b.Navigation("Level")
                        .IsRequired();

                    b.Navigation("MaxHitPoints")
                        .IsRequired();

                    b.Navigation("MitigationMagic")
                        .IsRequired();

                    b.Navigation("MitigationMelee")
                        .IsRequired();

                    b.Navigation("MitigationRange")
                        .IsRequired();

                    b.Navigation("ParryChance")
                        .IsRequired();

                    b.Navigation("Power")
                        .IsRequired();

                    b.Navigation("Quickness")
                        .IsRequired();

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Players.Player", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Players.PlayerGameSetting", "GameSetting")
                        .WithMany()
                        .HasForeignKey("GameSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSetting");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Weapons.Weapon", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Combats.CombatLoot", null)
                        .WithMany("Weapons")
                        .HasForeignKey("CombatLootId");

                    b.HasOne("DragonsCrossing.Domain.Items.HeroInventory", null)
                        .WithMany("Weapons")
                        .HasForeignKey("HeroInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Weapons.WeaponTemplate", "WeaponTemplate")
                        .WithMany()
                        .HasForeignKey("WeaponTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponTemplate");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Weapons.WeaponTemplate", b =>
                {
                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "BaseDamage", b1 =>
                        {
                            b1.Property<int>("WeaponTemplateId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("WeaponTemplateId");

                            b1.ToTable("WeaponTemplate");

                            b1.WithOwner()
                                .HasForeignKey("WeaponTemplateId");

                            b1.HasData(
                                new
                                {
                                    WeaponTemplateId = 1,
                                    Max = 10,
                                    Min = 1
                                },
                                new
                                {
                                    WeaponTemplateId = 2,
                                    Max = 10,
                                    Min = 1
                                },
                                new
                                {
                                    WeaponTemplateId = 3,
                                    Max = 8,
                                    Min = 1
                                },
                                new
                                {
                                    WeaponTemplateId = 4,
                                    Max = 6,
                                    Min = 1
                                },
                                new
                                {
                                    WeaponTemplateId = 5,
                                    Max = 6,
                                    Min = 1
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "BonusDamage", b1 =>
                        {
                            b1.Property<int>("WeaponTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("WeaponTemplateId");

                            b1.ToTable("WeaponTemplate");

                            b1.WithOwner()
                                .HasForeignKey("WeaponTemplateId");

                            b1.HasData(
                                new
                                {
                                    WeaponTemplateId = 1,
                                    Max = 1.0,
                                    Min = -2.0
                                },
                                new
                                {
                                    WeaponTemplateId = 2,
                                    Max = 1.0,
                                    Min = -2.0
                                },
                                new
                                {
                                    WeaponTemplateId = 3,
                                    Max = 1.0,
                                    Min = -2.0
                                },
                                new
                                {
                                    WeaponTemplateId = 4,
                                    Max = 2.0,
                                    Min = -1.0
                                },
                                new
                                {
                                    WeaponTemplateId = 5,
                                    Max = 3.0,
                                    Min = -1.0
                                });
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "CriticalHit", b1 =>
                        {
                            b1.Property<int>("WeaponTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("WeaponTemplateId");

                            b1.ToTable("WeaponTemplate");

                            b1.WithOwner()
                                .HasForeignKey("WeaponTemplateId");
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "Dodge", b1 =>
                        {
                            b1.Property<int>("WeaponTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("WeaponTemplateId");

                            b1.ToTable("WeaponTemplate");

                            b1.WithOwner()
                                .HasForeignKey("WeaponTemplateId");
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "DoubleHit", b1 =>
                        {
                            b1.Property<int>("WeaponTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("WeaponTemplateId");

                            b1.ToTable("WeaponTemplate");

                            b1.WithOwner()
                                .HasForeignKey("WeaponTemplateId");
                        });

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeDouble", "Parry", b1 =>
                        {
                            b1.Property<int>("WeaponTemplateId")
                                .HasColumnType("int");

                            b1.Property<double>("Max")
                                .HasColumnType("float");

                            b1.Property<double>("Min")
                                .HasColumnType("float");

                            b1.HasKey("WeaponTemplateId");

                            b1.ToTable("WeaponTemplate");

                            b1.WithOwner()
                                .HasForeignKey("WeaponTemplateId");

                            b1.HasData(
                                new
                                {
                                    WeaponTemplateId = 1,
                                    Max = 4.0,
                                    Min = 2.0
                                },
                                new
                                {
                                    WeaponTemplateId = 2,
                                    Max = 4.0,
                                    Min = 2.0
                                },
                                new
                                {
                                    WeaponTemplateId = 3,
                                    Max = 4.0,
                                    Min = 2.0
                                },
                                new
                                {
                                    WeaponTemplateId = 4,
                                    Max = 4.0,
                                    Min = 2.0
                                },
                                new
                                {
                                    WeaponTemplateId = 5,
                                    Max = 4.0,
                                    Min = 2.0
                                });
                        });

                    b.Navigation("BaseDamage")
                        .IsRequired();

                    b.Navigation("BonusDamage");

                    b.Navigation("CriticalHit");

                    b.Navigation("Dodge");

                    b.Navigation("DoubleHit");

                    b.Navigation("Parry");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Zones.DiscoveredTile", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Heroes.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DragonsCrossing.Domain.Zones.Tile", "Tile")
                        .WithMany()
                        .HasForeignKey("TileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Hero");

                    b.Navigation("Tile");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Zones.Tile", b =>
                {
                    b.HasOne("DragonsCrossing.Domain.Zones.Zone", "Zone")
                        .WithMany("Tiles")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DragonsCrossing.Domain.Common.RangeInt", "HeroLevelRequired", b1 =>
                        {
                            b1.Property<int>("TileId")
                                .HasColumnType("int");

                            b1.Property<int>("Max")
                                .HasColumnType("int");

                            b1.Property<int>("Min")
                                .HasColumnType("int");

                            b1.HasKey("TileId");

                            b1.ToTable("Tile");

                            b1.WithOwner()
                                .HasForeignKey("TileId");

                            b1.HasData(
                                new
                                {
                                    TileId = 1,
                                    Max = 4,
                                    Min = 1
                                },
                                new
                                {
                                    TileId = 2,
                                    Max = 7,
                                    Min = 3
                                },
                                new
                                {
                                    TileId = 3,
                                    Max = 8,
                                    Min = 5
                                },
                                new
                                {
                                    TileId = 4,
                                    Max = 11,
                                    Min = 6
                                },
                                new
                                {
                                    TileId = 5,
                                    Max = 12,
                                    Min = 7
                                },
                                new
                                {
                                    TileId = 6,
                                    Max = 13,
                                    Min = 13
                                },
                                new
                                {
                                    TileId = 7,
                                    Max = 15,
                                    Min = 10
                                },
                                new
                                {
                                    TileId = 8,
                                    Max = 16,
                                    Min = 11
                                },
                                new
                                {
                                    TileId = 9,
                                    Max = 16,
                                    Min = 16
                                },
                                new
                                {
                                    TileId = 10,
                                    Max = 20,
                                    Min = 16
                                },
                                new
                                {
                                    TileId = 11,
                                    Max = 20,
                                    Min = 17
                                },
                                new
                                {
                                    TileId = 12,
                                    Max = 20,
                                    Min = 20
                                },
                                new
                                {
                                    TileId = 13,
                                    Max = 20,
                                    Min = 20
                                });
                        });

                    b.Navigation("HeroLevelRequired")
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Armors.Armor", b =>
                {
                    b.Navigation("Affixes");

                    b.Navigation("HeroStatsModifierResults");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Armors.ArmorTemplate", b =>
                {
                    b.Navigation("HeroStatModifiers");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Combats.Combat", b =>
                {
                    b.Navigation("CombatDetails");

                    b.Navigation("HeroSkillsCasted");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Combats.CombatLoot", b =>
                {
                    b.Navigation("Armor");

                    b.Navigation("NftItems");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.Hero", b =>
                {
                    b.Navigation("CombatStats")
                        .IsRequired();

                    b.Navigation("Inventory")
                        .IsRequired();

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Heroes.HeroSkillTemplate", b =>
                {
                    b.Navigation("Effects");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.GearAffixTemplate", b =>
                {
                    b.Navigation("ArmorSlots");

                    b.Navigation("Tiers");

                    b.Navigation("WeaponSlots");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.HeroInventory", b =>
                {
                    b.Navigation("Armors");

                    b.Navigation("NftItems");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Items.PlayerBackpack", b =>
                {
                    b.Navigation("NftItems");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.Monster", b =>
                {
                    b.Navigation("SpecialAbilitiesCasted");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterPersonality", b =>
                {
                    b.Navigation("AttributesAffected");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterSpecialAbility", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Monsters.MonsterTemplateOld", b =>
                {
                    b.Navigation("ItemsLoot");

                    b.Navigation("SpecialAbilities");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Players.Player", b =>
                {
                    b.Navigation("Backpack")
                        .IsRequired();

                    b.Navigation("Heroes");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Weapons.Weapon", b =>
                {
                    b.Navigation("Affixes");

                    b.Navigation("HeroStatsModifierResults");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Weapons.WeaponTemplate", b =>
                {
                    b.Navigation("HeroStatModifiers");
                });

            modelBuilder.Entity("DragonsCrossing.Domain.Zones.Zone", b =>
                {
                    b.Navigation("HeroSkillsAllowed");

                    b.Navigation("Tiles");
                });
#pragma warning restore 612, 618
        }
    }
}
